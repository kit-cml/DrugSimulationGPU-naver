#include <stdio.h>
#include <cuda_runtime.h>

// Kernel to perform a large number of floating-point operations
__global__ void stressTestKernel(float *a, float *b, float *c, int N) {
    int idx = blockIdx.x * blockDim.x + threadIdx.x;
    if (idx < N) {
        float sum = 0.0f;
        for (int i = 0; i < 1000000; ++i) { // Increased number of operations
            sum += a[idx] * b[idx] + c[idx];
            sum = sum * 0.999999f + 0.000001f; // More complex operation to avoid compiler optimization
        }
        c[idx] = sum;
    }
}

int main() {
    // Number of elements in arrays
    int N = 1 << 26; // Increased to 64M elements

    // Allocate host memory
    size_t size = N * sizeof(float);
    float *h_a = (float *)malloc(size);
    float *h_b = (float *)malloc(size);
    float *h_c = (float *)malloc(size);

    // Initialize host arrays
    for (int i = 0; i < N; ++i) {
        h_a[i] = 1.0f;
        h_b[i] = 2.0f;
        h_c[i] = 0.0f;
    }

    // Allocate device memory
    float *d_a, *d_b, *d_c;
    cudaMalloc((void **)&d_a, size);
    cudaMalloc((void **)&d_b, size);
    cudaMalloc((void **)&d_c, size);

    // Copy host arrays to device
    cudaMemcpy(d_a, h_a, size, cudaMemcpyHostToDevice);
    cudaMemcpy(d_b, h_b, size, cudaMemcpyHostToDevice);
    cudaMemcpy(d_c, h_c, size, cudaMemcpyHostToDevice);

    // Launch stress test kernel
    int threadsPerBlock = 1024; // Maximum number of threads per block for V100
    int blocksPerGrid = (N + threadsPerBlock - 1) / threadsPerBlock;
    stressTestKernel<<<blocksPerGrid, threadsPerBlock>>>(d_a, d_b, d_c, N);

    // Wait for GPU to finish before accessing on host
    cudaDeviceSynchronize();

    // Copy result back to host
    cudaMemcpy(h_c, d_c, size, cudaMemcpyDeviceToHost);

    // Clean up
    free(h_a);
    free(h_b);
    free(h_c);
    cudaFree(d_a);
    cudaFree(d_b);
    cudaFree(d_c);

    printf("Stress test completed.\n");
    return 0;
}
